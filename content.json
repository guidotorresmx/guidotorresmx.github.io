{"meta":{"title":"Marco Guido's blog","subtitle":"Software and some electronics stuff","description":"","author":"Marco Guido","url":"http://example.com","root":"/"},"pages":[{"title":"404","date":"2021-10-29T07:59:13.000Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""}],"posts":[{"title":"Syntax Highlighting","slug":"syntax-highlight","date":"2021-10-30T18:26:24.496Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/syntax-highlight/","link":"","permalink":"http://example.com/2021/10/30/syntax-highlight/","excerpt":"","text":"Hexo has two built-in syntax highlight libraries, highlight.js and prismjs. This tutorial shows you how to integrate Hexo’s built-in syntax highlight into your template. How to use code block in postsHexo supports two ways to write code block: Tag Plugin - Code Block and Tag Plugin - Backtick Code Block: 1234567891011{% codeblock [title] [lang:language] [url] [link text] [additional options] %}code snippet{% endcodeblock %}{% code [title] [lang:language] [url] [link text] [additional options] %}code snippet{% endcode %}``` [language] [title] [url] [link text] [additional options]code snippet``` The third syntax is a Markdown’s fenced code block syntax and Hexo extends it to support more features. Check out Tag Plugin Docs to find out options available. Tip: Hexo support posts written in any format, so long the corresponding renderer plugin is installed. It can be in markdown, ejs, swig, nunjucks, pug, asciidoc, etc. Regardless of the format used, those three code block syntax will always be available. Configuration12345678910111213# _config.ymlhighlight: enable: true auto_detect: false line_number: true tab_replace: '' wrap: true hljs: falseprismjs: enable: false preprocess: true line_number: true tab_replace: '' The YAML above is Hexo’s default configuration. Disabled12345# _config.ymlhighlight: enable: falseprismjs: enable: false When both highlight.enable and prismjs.enable are false, the output HTML of the code block is controlled by the corresponding renderer. For example, marked.js (used by hexo-renderer-marked, the default markdown renderer of Hexo) will add the language code to the class of &lt;code&gt;: 123```yamlhello: hexo``` 123&lt;pre&gt; &lt;code class=\"yaml\"&gt;hello: hexo&lt;/code&gt;&lt;/pre&gt; When no built-in syntax highlight is enabled, you can either install third-party syntax-highlight plugin, or use a browser-side syntax hilighter (e.g. highlight.js and prism.js both support running in browser). Highlight.js12345678910# _config.ymlhighlight: enable: true auto_detect: false line_number: true tab_replace: ' ' wrap: true hljs: falseprismjs: enable: false highlight.js is enabled by default and used as server-side highlighting in Hexo; it needs to be disabled if you prefer to run highlight.js on browser-side. Server-side means, the syntax highlight is generated during hexo generate or hexo server. auto_detectauto_detect is a highlight.js feature that detect language of the code block automatically. Tip: When you want to use “sublanguage highlight”, enable auto_detect and don’t mark language when writing code block. auto_detect is very resource-intensive. Do not enable it unless you really need “sublanguage highlight” or prefer not to mark language when writing code block. line_numberhighlight.js does not support line number. Hexo adds line number by wrapping output inside &lt;figure&gt; and &lt;table&gt;: 1234567891011121314&lt;figure class=\"highlight yaml\"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt; &lt;td class=\"gutter\"&gt; &lt;pre&gt;&lt;span class=\"line\"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt; &lt;/td&gt; &lt;td class=\"code\"&gt; &lt;pre&gt;&lt;span class=\"line\"&gt;&lt;span class=\"attr\"&gt;hello:&lt;/span&gt;&lt;span class=\"string\"&gt;hexo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; It is not the behavior of highlight.js and requires custom CSS for &lt;figure&gt; and &lt;table&gt; elements; some themes have built-in support. You might also notice that all class has no hljs- prefixed, we will revisit it later part. tab_replaceReplace tabs inside code block with given string. By default it is 2 spaces. wrapsHexo wraps the output inside &lt;figure&gt; and &lt;table&gt; to support line number. You need to disable both line_number and wrap to revert to highlight.js‘s behavior: 1234&lt;pre&gt;&lt;code class=\"yaml\"&gt;&lt;span class=\"comment\"&gt;# _config.yml&lt;/span&gt;&lt;span class=\"attr\"&gt;hexo:&lt;/span&gt; &lt;span class=\"string\"&gt;hexo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; Because line_number feature relies on wrap, you can’t disable wrap with line_number enabled: If you set line_number to true, wrap will be automatically enabled. hljsWhen hljs is set to true, all the HTML output will have class prefixed with hljs- (regardless wrap is enabled or not): 1234&lt;pre&gt;&lt;code class=\"yaml hljs\"&gt;&lt;span class=\"hljs-comment\"&gt;# _config.yml&lt;/span&gt;&lt;span class=\"hljs-attr\"&gt;hexo:&lt;/span&gt; &lt;span class=\"hljs-string\"&gt;hexo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; Tip: When line_number is set to false, wrap is set to false and hljs is set to true, you can then use highlight.js theme directly in your site. PrismJS12345678# _config.ymlhighlight: enable: falseprismjs: enable: true preprocess: true line_number: true tab_replace: '' Prismjs is disabled by default. You should set highlight.enable to false before enabling prismjs. preprocessHexo’s built-in prismjs supports both browser-side (preprocess set to false) and server-side (preprocess set to true). When use server-side mode (set preprocess to true), you only need to include prismjs theme (css stylesheet) in your website. When use browser-side (set preprocess to false), you have to include the javascript library as well. Prismjs is designed to be used in browser, thus under preprocess mode only limited prismjs plugin is supported: Line Numbers: Only prism-line-numbers.css is required, No need to include prism-line-numbers.js in your website. Hexo will generate required HTML mark up mark up for you. Show Languages: Hexo will always have data-language attribute added as long as language is given for the code block. Any other prism plugins that don’t need special HTML markup are supported as well, but you will have to include JavaScript required by those plugins. All prism plugins are supported if preprocess is set to false. Here are a few things you should still pay attention to: Line Numbers: Hexo won’t generate required HTML mark up when preprocess is set to false. Requires both prism-line-numbers.css and prism-line-numbers.js. Show Languages: Hexo will always have data-language attribute added as long as language is given for the code block. Line Highlight: Both Hexo Tag Plugin - Code Block and Tag Plugin - Backtick Code Block supports Line Highlight syntax (mark option). When mark option is given, Hexo will generate the corresponding HTML markup. line_numberWith both preprocess and line_number set to true, you just need to include prism-line-numbers.css to make line-numbering work. If you set both preprocess and line_number to false, you will need both prism-line-numbers.css and prism-line-numbers.js. tab_replaceReplace \\t inside code block with given string. By default it is 2 spaces. Other useful information Highlight.js PrismJS The source codes behind Hexo’s syntax highlighting are available in: Highlight.js Utility Functions PrismJS Utility Functions Tag Plugin - Code Block Tag Plugin - Backtick Code Block","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Tag Plugins","slug":"tag-plugins","date":"2021-10-30T18:26:24.496Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/tag-plugins/","link":"","permalink":"http://example.com/2021/10/30/tag-plugins/","excerpt":"","text":"Tag plugins are different from post tags. They are ported from Octopress and provide a useful way for you to quickly add specific content to your posts. Although you can write your posts in any formats, but the tag plugins will always be available and syntax remains the same. Tag plugins should not be wrapped inside Markdown syntax, e.g. []({% post_path lorem-ipsum %}) is not supported. Block QuotePerfect for adding quotes to your post, with optional author, source and title information. Alias: quote 123{% blockquote [author[, source]] [link] [source_link_title] %}content{% endblockquote %} ExamplesNo arguments. Plain blockquote. 123{% blockquote %}Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.{% endblockquote %} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. Quote from a book 123{% blockquote David Levithan, Wide Awake %}Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.{% endblockquote %} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake Quote from Twitter 123{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}NEW: DevDocs now comes with syntax highlighting. http://devdocs.io{% endblockquote %} NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 Quote from an article on the web 123{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}Every interaction is both precious and an opportunity to delight.{% endblockquote %} Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing Code BlockUseful feature for adding code snippets to your post. Alias: code 123{% codeblock [title] [lang:language] [url] [link text] [additional options] %}code snippet{% endcodeblock %} Specify additional options in option:value format, e.g. line_number:false first_line:5. Extra Options Description Default line_number Show line number true highlight Enable code highlighting true first_line Specify the first line number 1 mark Line highlight specific line(s), each value separated by a comma. Specify number range using a dashExample: mark:1,4-7,10 will mark line 1, 4 to 7 and 10. wrap Wrap the code block in &lt;table&gt; true ExamplesA plain code block 123{% codeblock %}alert('Hello World!');{% endcodeblock %} 1alert('Hello World!'); Specifying the language 123{% codeblock lang:objc %}[rectangle setX: 10 y: 10 width: 20 height: 20];{% endcodeblock %} 1[rectangle setX: 10 y: 10 width: 20 height: 20]; Adding a caption to the code block 123{% codeblock Array.map %}array.map(callback[, thisArg]){% endcodeblock %} Array.map1array.map(callback[, thisArg]) Adding a caption and a URL 1234{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3]{% endcodeblock %} _.compactUnderscore.js12_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3] Backtick Code BlockThis is identical to using a code block, but instead uses three backticks to delimit the block. ``` [language] [title] [url] [link text] code snippet ``` Pull QuoteTo add pull quotes to your posts: 123{% pullquote [class] %}content{% endpullquote %} jsFiddleTo embed a jsFiddle snippet: 1{% jsfiddle shorttag [tabs] [skin] [width] [height] %} GistTo embed a Gist snippet: 1{% gist gist_id [filename] %} iframeTo embed an iframe: 1{% iframe url [width] [height] %} ImageInserts an image with specified size. 1{% img [class names] /path/to/image [width] [height] '\"title text\" \"alt text\"' %} LinkInserts a link with target=\"_blank\" attribute. 1{% link text url [external] [title] %} Include CodeInserts code snippets in source/downloads/code folder. The folder location can be specified through the code_dir option in the config. 1{% include_code [title] [lang:language] [from:line] [to:line] path/to/file %} ExamplesEmbed the whole content of test.js 1{% include_code lang:javascript test.js %} Embed line 3 only 1{% include_code lang:javascript from:3 to:3 test.js %} Embed line 5 to 8 1{% include_code lang:javascript from:5 to:8 test.js %} Embed line 5 to the end of file 1{% include_code lang:javascript from:5 test.js %} Embed line 1 to 8 1{% include_code lang:javascript to:8 test.js %} YouTubeInserts a YouTube video. 1{% youtube video_id [type] [cookie] %} ExamplesEmbed a video 1{% youtube lJIrF4YjHfQ %} Embed a playlist 1{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' %} Enable privacy-enhanced mode YouTube’s cookie is not used in this mode. 12{% youtube lJIrF4YjHfQ false %}{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' false %} VimeoInserts a responsive or specified size Vimeo video. 1{% vimeo video_id [width] [height] %} Include PostsInclude links to other posts. 12{% post_path filename %}{% post_link filename [title] [escape] %} You can ignore permalink and folder information, like languages and dates, when using this tag. For instance: {% post_link how-to-bake-a-cake %}. This will work as long as the filename of the post is how-to-bake-a-cake.md, even if the post is located at source/posts/2015-02-my-family-holiday and has permalink 2018/en/how-to-bake-a-cake. You can customize the text to display, instead of displaying the post’s title. Post’s title and custom text are escaped by default. You can use the escape option to disable escaping. For instance: Display title of the post. {% post_link hexo-3-8-released %} Post not found: hexo-3-8-released Display custom text. {% post_link hexo-3-8-released 'Link to a post' %} Post not found: hexo-3-8-released Link to a post Escape title. 1{% post_link hexo-4-released 'How to use &lt;b&gt; tag in title' %} Post not found: hexo-4-released How to use tag in title Do not escape title. 1{% post_link hexo-4-released '&lt;b&gt;bold&lt;/b&gt; custom title' false %} Post not found: hexo-4-released bold custom title false Include AssetsInclude post assets, to be used in conjunction with post_asset_folder. 123{% asset_path filename %}{% asset_img [class names] slug [width] [height] [title text [alt text]] %}{% asset_link filename [title] [escape] %} Embed imagehexo-renderer-marked 3.1.0+ can (optionally) resolves the post’s path of an image automatically, refer to this section on how to enable it. “foo.jpg” is located at http://example.com/2020/01/02/hello/foo.jpg. Default (no option) {% asset_img foo.jpg %} 1&lt;img src=\"/2020/01/02/hello/foo.jpg\"&gt; Custom class {% asset_img post-image foo.jpg %} 1&lt;img src=\"/2020/01/02/hello/foo.jpg\" class=\"post-image\"&gt; Display size {% asset_img foo.jpg 500 400 %} 1&lt;img src=\"/2020/01/02/hello/foo.jpg\" width=\"500\" height=\"400\"&gt; Title &amp; Alt {% asset_img logo.svg \"lorem ipsum'dolor'\" %} 1&lt;img src=\"/2020/01/02/hello/foo.jpg\" title=\"lorem ipsum\" alt=\"dolor\"&gt; RawIf certain content is causing processing issues in your posts, wrap it with the raw tag to avoid rendering errors. 123{% raw %}content{% endraw %} Post ExcerptUse text placed before the &lt;!-- more --&gt; tag as an excerpt for the post. excerpt: value in the front-matter, if specified, will take precedent. Examples: 123Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;!-- more --&gt;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Templates","slug":"templates","date":"2021-10-30T18:26:24.496Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/templates/","link":"","permalink":"http://example.com/2021/10/30/templates/","excerpt":"","text":"Templates define the presentation of your website by describing what each page should look like. The table below shows the corresponding template for every available page. At the very least, a theme should contain an index template. Template Page Fallback index Home page post Posts index page Pages index archive Archives index category Category archives archive tag Tag archives archive LayoutsWhen pages share a similar structure - for instance, when two templates have both a header and a footer - you can consider using a layout to declare these structural similarities. Every layout file should contain a body variable to display the contents of the template in question. For example: index.ejs1index layout.ejs1234&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;&lt;/html&gt; yields: 1234&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt;index&lt;/body&gt;&lt;/html&gt; By default, the layout template is used by all other templates. You can specify additional layouts in the front-matter or set it to false to disable it. It’s even possible to build a complex nested structure by including more layout templates in your top layout. PartialsPartials are useful for sharing components between your templates. Typical examples include headers, footers or sidebars. You may want to put your partials in separate files to make maintaining your website significantly more convenient. For example: partial/header.ejs1&lt;h1 id=\"logo\"&gt;&lt;%= config.title %&gt;&lt;/h1&gt; index.ejs12&lt;%- partial('partial/header') %&gt;&lt;div id=\"content\"&gt;Home page&lt;/div&gt; yields: 12&lt;h1 id=\"logo\"&gt;My Site&lt;/h1&gt;&lt;div id=\"content\"&gt;Home page&lt;/div&gt; Local VariablesYou can define local variables in templates and use them in other templates. partial/header.ejs1&lt;h1 id=\"logo\"&gt;&lt;%= title %&gt;&lt;/h1&gt; index.ejs12&lt;%- partial('partial/header', {title: 'Hello World'}) %&gt;&lt;div id=\"content\"&gt;Home page&lt;/div&gt; yields: 12&lt;h1 id=\"logo\"&gt;Hello World&lt;/h1&gt;&lt;div id=\"content\"&gt;Home page&lt;/div&gt; OptimizationIf your theme is exceedingly complex or if the number of files to generate becomes too large, Hexo’s file generation performance may begin to decrease considerably. Aside from simplifying your theme, you may also try Fragment Caching, which was introduced in Hexo 2.7. This feature was borrowed from Ruby on Rails. It causes content to be saved as fragments and cached for when additional requests are made. This can reduce the number of database queries and can also speed up file generation. Fragment caching is best used for headers, footers, sidebars or other static content that is unlikely to change from template to template. For example: 123&lt;%- fragment_cache('header', function(){ return '&lt;header&gt;&lt;/header&gt;';}); Though it may be easier to use partials: 1&lt;%- partial('header', {}, {cache: true}); fragment_cache() will cache the rendered result and output the cached result to other pages. This should only be used on partials that are expected not to change across different pages. Otherwise, it should not be enabled.For example, it should be disabled when relative_link is enabled in the config. This is because relative links may appear differently across pages.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Themes","slug":"themes","date":"2021-10-30T18:26:24.496Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/themes/","link":"","permalink":"http://example.com/2021/10/30/themes/","excerpt":"","text":"It’s easy to build a Hexo theme - you just have to create a new folder. To start using your theme, modify the theme setting in your site’s _config.yml. A theme should have the following structure: 123456.├── _config.yml├── languages├── layout├── scripts└── source _config.ymlTheme configuration file. Unlike the site’s primary configuration file, modifying this doesn’t require a server restart. languagesLanguage folder. See internationalization (i18n) for more info. layoutLayout folder. This folder contains the theme’s template files, which define the appearance of your website. Hexo provides the Swig template engine by default, but you can easily install additional plugins to support alternative engines such as EJS, Haml, Jade, or Pug. Hexo chooses the template engine based on the file extension of the template (just like the posts). For example: 12layout.ejs - uses EJSlayout.swig - uses Swig See templates for more info. scriptsScript folder. Hexo will automatically load all JavaScript files in this folder during initialization. For more info, see plugins. sourceSource folder. Place your assets (e.g. CSS and JavaScript files) here. Hexo ignores hidden files and files or folders prefixed with _ (underscore). Hexo will process and save all renderable files to the public folder. Non-renderable files will be copied to the public folder directly. PublishingWhen you have finished building your theme, you can publish it to the theme list. Before doing so, you should run the theme unit test to ensure that everything works. The steps for publishing a theme are very similar to those for updating documentation. Fork hexojs/site Clone the repository to your computer and install dependencies. 123$ git clone https://github.com/&lt;username&gt;/site.git$ cd site$ npm install Edit source/_data/themes.yml and add your theme. For example: 12345678910- name: landscape description: A brand new default theme for Hexo. link: https://github.com/hexojs/hexo-theme-landscape preview: http://hexo.io/hexo-theme-landscape tags: - official - responsive - widget - two_column - one_column Add a screenshot (with the same name as the theme) to source/themes/screenshots. It must be a 800*500px PNG. Push the branch. Create a pull request and describe the change.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Troubleshooting","slug":"troubleshooting","date":"2021-10-30T18:26:24.496Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/troubleshooting/","link":"","permalink":"http://example.com/2021/10/30/troubleshooting/","excerpt":"","text":"In case you’re experiencing problems with using Hexo, here is a list of solutions to some frequently encountered issues. If this page doesn’t help you solve your problem, try doing a search on GitHub or our Google Group. YAML Parsing Error12JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29: last_updated: Last updated: %s Wrap the string with quotations if it contains colons. 12JS-YAML: bad indentation of a mapping entry at line 18, column 31: last_updated:\"Last updated: %s\" Make sure you are using soft tabs and add a space after colons. You can see YAML Spec for more info. EMFILE Error1Error: EMFILE, too many open files Though Node.js has non-blocking I/O, the maximum number of synchronous I/O is still limited by the system. You may come across an EMFILE error when trying to generate a large number of files. You can try to run the following command to increase the number of allowed synchronous I/O operations. 1$ ulimit -n 10000 Error: cannot modify limit If you encounter the following error: 12$ ulimit -n 10000ulimit: open files: cannot modify limit: Operation not permitted It means some system-wide configurations are preventing ulimit to being increased to a certain limit. To override the limit: Add the following line to “/etc/security/limits.conf”: 123* - nofile 10000# '*' applies to all users and '-' set both soft and hard limits The above setting may not apply in some cases, ensure “/etc/pam.d/login” and “/etc/pam.d/lightdm” have the following line. (Ignore this step if those files do not exist) 1session required pam_limits.so If you are on a systemd-based distribution, systemd may override “limits.conf”. To set the limit in systemd, add the following line in “/etc/systemd/system.conf” and “/etc/systemd/user.conf”: 1DefaultLimitNOFILE=10000 Reboot Process Out of MemoryWhen you encounter this error during generation: 1FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory Increase Node.js heap memory size by changing the first line of hexo-cli (which hexo to look for the file). 1#!/usr/bin/env node --max_old_space_size=8192 Out of memory while generating a huge blog · Issue #1735 · hexojs/hexo Git Deployment ProblemsRPC failed123error: RPC failed; result=22, HTTP code = 403fatal: 'username.github.io' does not appear to be a git repository Make sure you have set up git on your computer properly or try to use HTTPS repository URL instead. Error: ENOENT: no such file or directoryIf you get an error like Error: ENOENT: no such file or directory it’s probably due to to mixing uppercase and lowercase letters in your tags, categories, or filenames. Git cannot automatically merge this change so it breaks the automatic branching. To fix this, try Check every tag’s and category’s case and make sure they are the same. Commit Clean and build: ./node_modules/.bin/hexo clean &amp;&amp; ./node_modules/.bin/hexo generate Manually copy the public folder to your desktop Switch branch from your master branch to your deployment branch locally Copy the contents of the public folder from your desktop into the deployment branch Commit. You should see any merge conflicts appear that you can manually resolve. Switch back to your master branch and deploy normally: ./node_modules/.bin/hexo deploy Server Problems1Error: listen EADDRINUSE You may have started two Hexo servers at the same time or there might be another application using the same port. Try to modify the port setting or start the Hexo server with the -p flag. 1$ hexo server -p 5000 Plugin Installation Problems1npm ERR! node-waf configure build This error may occur when trying to install a plugin written in C, C++ or other non-JavaScript languages. Make sure you have installed the right compiler on your computer. Error with DTrace (Mac OS X)123{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' } DTrace install may have issue, use this: 1$ npm install hexo --no-optional See #1326 Iterate Data Model on Jade or SwigHexo uses Warehouse for its data model. It’s not an array so you may have to transform objects into iterables. 12{% for post in site.posts.toArray() %}{% endfor %} Data Not UpdatedSome data cannot be updated, or the newly generated files are identical to those of the last version. Clean the cache and try again. 1$ hexo clean No command is executedWhen you can’t get any command except help, init and version to work and you keep getting content of hexo help, it could be caused by a missing hexo in package.json: 12345{ \"hexo\": { \"version\": \"3.2.2\" }} Escape ContentsHexo uses Nunjucks to render posts (Swig was used in older version, which share a similar syntax). Content wrapped with {{ }} or {% %} will get parsed and may cause problems. You can skip the parsing by wrapping it with the raw tag plugin, single backtick `{{ }}` or triple backtick.Alternatively, Nunjucks tags can be disabled through the renderer’s option (if supported), API or front-matter. 123{% raw %}Hello {{ world }}{% endraw %} 123```Hello {{ world }}``` ENOSPC Error (Linux)Sometimes when running the command $ hexo server it returns an error: 1Error: watch ENOSPC ... It can be fixed by running $ npm dedupe or, if that doesn’t help, try the following in the Linux console: 1$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p This will increase the limit for the number of files you can watch. EMPERM Error (Windows Subsystem for Linux)When running $ hexo server in a BashOnWindows environment, it returns the following error: 1Error: watch /path/to/hexo/theme/ EMPERM Unfortunately, WSL does not currently support filesystem watchers. Therefore, the live updating feature of hexo’s server is currently unavailable. You can still run the server from a WSL environment by first generating the files and then running it as a static server: 12$ hexo generate$ hexo server -s This is a known BashOnWindows issue, and on 15 Aug 2016, the Windows team said they would work on it. You can get progress updates and encourage them to prioritize it on the issue’s UserVoice suggestion page. Template render errorSometimes when running the command $ hexo generate it returns an error: 12FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) One possible reason is that there are some unrecognizable words in your file, e.g. invisible zero width characters.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Variables","slug":"variables","date":"2021-10-30T18:26:24.496Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/variables/","link":"","permalink":"http://example.com/2021/10/30/variables/","excerpt":"","text":"Global Variables Variable Description Type site Sitewide information. object; see Site Variables page Page specific information and custom variables set in front-matter. object; see Page Variables config Site configuration. object (your site’s _config file) theme Theme configuration. Inherits from site configuration. object (your theme’s _config file) path Path of current page string url Full URL of current page string env Environment variables ??? Lodash has been removed from global variables since Hexo 5.0.0. You-Dont-Need-Lodash-Underscore might be helpful for your migration. Site Variables Variable Description Type site.posts All posts array of post objects site.pages All pages array of page objects site.categories All categories array of ??? site.tags All tags array of ??? Page VariablesArticle (page) Variable Description Type page.title Article title string page.date Article created date Moment.js object page.updated Article last updated date Moment.js object page.comments Comment enabled or not boolean page.layout Layout name string page.content The full processed content of the article string page.excerpt Article excerpt string page.more Contents except article excerpt string page.source The path of the source file string page.full_source Full path of the source file string page.path The URL of the article without root URL. We usually use url_for(page.path) in theme. string page.permalink Full (encoded) URL of the article string page.prev The previous post, null if the post is the first post ??? page.next The next post, null if the post is the last post ??? page.raw The raw data of the article ??? page.photos The photos of the article (Used in gallery posts) array of ??? page.link The external link of the article (Used in link posts) string Post (post): Same as page layout but add the following variables. Variable Description Type page.published True if the post is not a draft boolean page.categories All categories of the post array of ??? page.tags All tags of the post array of ??? Home (index) Variable Description Type page.per_page Posts displayed per page number page.total Total number of pages number page.current Current page number number page.current_url The URL of current page string page.posts Posts in this page (Data Model) object page.prev Previous page number. 0 if the current page is the first. number page.prev_link The URL of previous page. '' if the current page is the first. string page.next Next page number. 0 if the current page is the last. number page.next_link The URL of next page. '' if the current page is the last. string page.path The URL of current page without root URL. We usually use url_for(page.path) in theme. string Archive (archive): Same as index layout but add the following variables. Variable Description Type page.archive Equals true boolean page.year Archive year (4-digit) number page.month Archive month (2-digit without leading zeros) number Category (category): Same as index layout but add the following variables. Variable Description Type page.category Category name string Tag (tag): Same as index layout but add the following variables. Variable Description Type page.tag Tag name string","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Writing","slug":"writing","date":"2021-10-30T18:26:24.496Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/writing/","link":"","permalink":"http://example.com/2021/10/30/writing/","excerpt":"","text":"To create a new post or a new page, you can run the following command: 1$ hexo new [layout] &lt;title&gt; post is the default layout, but you can supply your own. You can change the default layout by editing the default_layout setting in _config.yml. LayoutThere are three default layouts in Hexo: post, page and draft. Files created by each of them is saved to a different path. Newly created posts are saved to the source/_posts folder. Layout Path post source/_posts page source draft source/_drafts If you don’t want an article (post/page) to be processed with a theme, set layout: false in its front-matter. Refer to this section for more details. FilenameBy default, Hexo uses the post title as its filename. You can edit the new_post_name setting in _config.yml to change the default filename. For example, :year-:month-:day-:title.md will prefix filenames with the post creation date. You can use the following placeholders: Placeholder Description :title Post title (lower case, with spaces replaced by hyphens) :year Created year, e.g. 2015 :month Created month (leading zeros), e.g. 04 :i_month Created month (no leading zeros), e.g. 4 :day Created day (leading zeros), e.g. 07 :i_day Created day (no leading zeros), e.g. 7 DraftsPreviously, we mentioned a special layout in Hexo: draft. Posts initialized with this layout are saved to the source/_drafts folder. You can use the publish command to move drafts to the source/_posts folder. publish works in a similar way to the new command. 1$ hexo publish [layout] &lt;title&gt; Drafts are not displayed by default. You can add the --draft option when running Hexo or enable the render_drafts setting in _config.yml to render drafts. ScaffoldsWhen creating posts, Hexo will build files based on the corresponding file in scaffolds folder. For example: 1$ hexo new photo \"My Gallery\" When you run this command, Hexo will try to find photo.md in the scaffolds folder and build the post based on it. The following placeholders are available in scaffolds: Placeholder Description layout Layout title Title date File created date Supported FormatsHexo support posts written in any format, as long as the corresponding renderer plugin is installed. For example, Hexo has hexo-renderer-marked and hexo-renderer-ejs installed by default, so you can write your posts in markdown or in ejs. If you have hexo-renderer-pug installed, then you can even write your post in pug template language. You can rename your posts and change to file extension from .md to .ejs, then Hexo will use hexo-renderer-ejs to render that file, so do the other formats.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Asset Folders","slug":"asset-folders","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/asset-folders/","link":"","permalink":"http://example.com/2021/10/30/asset-folders/","excerpt":"","text":"Global Asset FolderAssets are non-post files in the source folder, such as images, CSS or JavaScript files. For instance, If you are only going to have a few images in the Hexo project, then the easiest way is to keep them in a source/images directory. Then, you can access them using something like ![](/images/image.jpg). Post Asset Folder For users who expect to regularly serve images and/or other assets, and for those who prefer to separate their assets on a post-per-post basis, Hexo also provides a more organized way to manage assets. This slightly more involved, but very convenient approach to asset management can be turned on by setting the post_asset_folder setting in _config.yml to true. _config.yml1post_asset_folder: true With asset folder management enabled, Hexo will create a folder every time you make a new post with the hexo new [layout] &lt;title&gt; command. This asset folder will have the same name as the markdown file associated with the post. Place all assets related to your post into the associated folder, and you will be able to reference them using a relative path, making for an easier and more convenient workflow. Tag Plugins For Relative Path ReferencingReferencing images or other assets using normal markdown syntax and relative paths may lead to incorrect display on archive or index pages. Plugins have been created by the community to address this issue in Hexo 2. However, with the release of Hexo 3, several new tag plugins were added to core. These enable you to reference your assets more easily in posts: 123{% asset_path slug %}{% asset_img slug [title] %}{% asset_link slug [title] %} For example, with post asset folders enabled, if you place an image example.jpg into your asset folder, it will not appear on the index page if you reference it using a relative path with regular ![](example.jpg) markdown syntax (however, it will work as expected in the post itself). The correct way to reference the image will thus be using tag plugin syntax rather than markdown: 12{% asset_img example.jpg This is an example image %}{% asset_img \"spaced asset.jpg\" \"spaced title\" %} This way, the image will appear both inside the post and on index and archive pages. Embedding an image using markdownhexo-renderer-marked 3.1.0 introduced a new option that allows you to embed an image in markdown without using asset_img tag plugin. To enable: _config.yml1234post_asset_folder: truemarked: prependRoot: true postAsset: true Once enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, ![](image.jpg) will be rendered as &lt;img src=\"/2020/01/02/foo/image.jpg\"&gt;.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"commands","slug":"commands","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/commands/","link":"","permalink":"http://example.com/2021/10/30/commands/","excerpt":"","text":"This is a repost from hexo’s website. init1$ hexo init [folder] Initializes a website. If no folder is provided, Hexo will set up a website in the current directory. This command is a shortcut that runs the following steps: Git clone hexo-starter including hexo-theme-landscape into the current directory or a target folder if specified. Install dependencies using a package manager: Yarn 1, pnpm or npm, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with Node.js by default. new1$ hexo new [layout] &lt;title&gt; Creates a new article. If no layout is provided, Hexo will use the default_layout from _config.yml. If the title contains spaces, surround it with quotation marks. Option Description -p, --path Post path. Customize the path of the post. -r, --replace Replace the current post if existed. -s, --slug Post slug. Customize the URL of the post. By default, Hexo will use the title to define the path of the file. For pages, it will create a directory of that name and an index.md file in it. Use the --path option to override that behaviour and define the file path: 1hexo new page --path about/me \"About me\" will create source/about/me.md file with the title “About me” set in the front matter. Please note that the title is mandatory. For example, this will not result in the behaviour you might expect: 1hexo new page --path about/me will create the post source/_posts/about/me.md with the title “page” in the front matter. This is because there is only one argument (page) and the default layout is post. generate1$ hexo generate Generates static files. Option Description -d, --deploy Deploy after generation finishes -w, --watch Watch file changes -b, --bail Raise an error if any unhandled exception is thrown during generation -f, --force Force regenerate -c, --concurrency Maximum number of files to be generated in parallel. Default is infinity publish1$ hexo publish [layout] &lt;filename&gt; Publishes a draft. server1$ hexo server Starts a local server. By default, this is at http://localhost:4000/. Option Description -p, --port Override default port -s, --static Only serve static files -l, --log Enable logger. Override logger format. deploy1$ hexo deploy Deploys your website. Option Description -g, --generate Generate before deployment render1$ hexo render &lt;file1&gt; [file2] ... Renders files. Option Description -o, --output Output destination migrate1$ hexo migrate &lt;type&gt; Migrates content from other blog systems. clean1$ hexo clean Cleans the cache file (db.json) and generated files (public). list1$ hexo list &lt;type&gt; Lists all routes. version1$ hexo version Displays version information. OptionsSafe mode1$ hexo --safe Disables loading plugins and scripts. Try this if you encounter problems after installing a new plugin. Debug mode1$ hexo --debug Logs verbose messages to the terminal and to debug.log. Try this if you encounter any problems with Hexo. If you see errors, please raise a GitHub issue. Silent mode1$ hexo --silent Silences output to the terminal. Customize config file path1$ hexo --config custom.yml Uses a custom config file (instead of _config.yml). Also accepts a comma-separated list (no spaces) of JSON or YAML config files that will combine the files into a single _multiconfig.yml. 1$ hexo --config custom.yml,custom2.json Display drafts1$ hexo --draft Displays draft posts (stored in the source/_drafts folder). Customize CWD1$ hexo --cwd /path/to/cwd Customizes the path of current working directory.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Configuration","slug":"configuration","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/configuration/","link":"","permalink":"http://example.com/2021/10/30/configuration/","excerpt":"","text":"You can modify site settings in _config.yml or in an alternate config file. Site Setting Description title The title of your website subtitle The subtitle of your website description The description of your website keywords The keywords of your website. Supports multiple values. author Your name language The language of your website. Use a 2-letter ISO-639-1 code or optionally its variant. Default is en. timezone The timezone of your website. Hexo uses the setting on your computer by default. You can find the list of available timezones here. Some examples are America/New_York, Japan, and UTC. URL Setting Description Default url The URL of your website, must starts with http:// or https:// root The root directory of your website url's pathname permalink The permalink format of articles :year/:month/:day/:title/ permalink_defaults Default values of each segment in permalink pretty_urls Rewrite the permalink variables to pretty URLs pretty_urls.trailing_index Trailing index.html, set to false to remove it true pretty_urls.trailing_html Trailing .html, set to false to remove it (does not apply to trailing index.html) true Examples: 1234# e.g. page.permalink is http://example.com/foo/bar/index.htmlpretty_urls: trailing_index: false# becomes http://example.com/foo/bar/ Directory Setting Description Default source_dir Source folder. Where your content is stored source public_dir Public folder. Where the static site will be generated public tag_dir Tag directory tags archive_dir Archive directory archives category_dir Category directory categories code_dir Include code directory (subdirectory of source_dir) downloads/code i18n_dir i18n directory :lang skip_render Paths that will be copied to public raw, without being rendered. You can use glob expressions for path matching. Examples: 123456skip_render: \"mypage/**/*\"# will output `source/mypage/index.html` and `source/mypage/code.js` without altering them.## This also can be used to exclude posts,skip_render: \"_posts/test-post.md\"# will ignore the `source/_posts/test-post.md`. Writing Setting Description Default new_post_name The filename format for new posts :title.md default_layout Default layout post titlecase Transform titles into title case? false external_link Open external links in a new tab? external_link.enable Open external links in a new tab? true external_link.field Applies to the whole site or post only site external_link.exclude Exclude hostname. Specify subdomain when applicable, including www [] filename_case Transform filenames to 1 lower case; 2 upper case 0 render_drafts Display drafts? false post_asset_folder Enable the Asset Folder? false relative_link Make links relative to the root folder? false future Display future posts? true highlight Code block syntax highlight settings, see Highlight.js section for usage guide prismjs Code block syntax highlight settings, see PrismJS section for usage guide Home page setting Setting Description Default index_generator Generate an archive of posts, powered by hexo-generator-index index_generator.path Root path for your blog’s index page '' index_generator.per_page Posts displayed per page. 10 index_generator.order_by Posts order. Order by descending date (new to old) by default. -date index_generator.pagination_dir URL format, see Pagination setting below page Category &amp; Tag Setting Description Default default_category Default category uncategorized category_map Category slugs tag_map Tag slugs Date / Time formatHexo uses Moment.js to process dates. Setting Description Default date_format Date format YYYY-MM-DD time_format Time format HH:mm:ss updated_option The updated value to used when not provided in the front-matter mtime updated_option controls the updated value when not provided in the front-matter: mtime: Use file modification date as updated. It is the default behavior of Hexo since 3.0.0 date: Use date as updated. Typically used with Git workflow when file modification date could be different. empty: Simply drop updated when not provided. May not be compatible with most themes and plugins. use_date_for_updated is deprecated and will be removed in next major version. Please use updated_option: 'date' instead. Pagination Setting Description Default per_page Number of posts displayed on each page. 0 disables pagination 10 pagination_dir URL format page Examples: 12345pagination_dir: 'page'# http://example.com/page/2pagination_dir: 'awesome-page'# http://example.com/awesome-page/2 Extensions Setting Description theme Theme name. false disables theming theme_config Theme configuration. Include any custom theme settings under this key to override theme defaults. deploy Deployment settings meta_generator Meta generator tag. false disables injection of the tag. Include/Exclude Files or FoldersUse the following options to explicitly process or ignore certain files/folders. Support glob expressions for path matching. include and exclude options only apply to the source/ folder, whereas ignore option applies to all folders. Setting Description include Include hidden files (including files/folders with a name that start with an underscore, with an exception*) exclude Exclude files/folders ignore Ignore files/folders Examples: 1234567891011121314151617181920212223242526272829303132# Include/Exclude Files/Foldersinclude: - \".nojekyll\" # Include 'source/css/_typing.css'. - \"css/_typing.css\" # Include any file in 'source/_css/'. - \"_css/*\" # Include any file and subfolder in 'source/_css/'. - \"_css/**/*\"exclude: # Exclude 'source/js/test.js'. - \"js/test.js\" # Exclude any file in 'source/js/'. - \"js/*\" # Exclude any file and subfolder in 'source/js/'. - \"js/**/*\" # Exclude any file with filename that starts with 'test' in 'source/js/'. - \"js/test*\" # Exclude any file with filename that starts with 'test' in 'source/js/' and its subfolders. - \"js/**/test*\" # Do not use this to exclude posts in the 'source/_posts/'. # Use skip_render for that. Or prepend an underscore to the filename. # - \"_posts/hello-world.md\" # Does not work.ignore: # Ignore any folder named 'foo'. - \"**/foo\" # Ignore 'foo' folder in 'themes/' only. - \"**/themes/*/foo\" # Same as above, but applies to every subfolders of 'themes/'. - \"**/themes/**/foo\" Each value in the list must be enclosed with single/double quotes. include: and exclude: do not apply to the themes/ folder. Either use ignore: or alternatively, prepend an underscore to the file/folder name to exclude. * Notable exception is the source/_posts folder, but any file or folder with a name that starts with an underscore under that folder would still be ignored. Using include: rule in that folder is not recommended. Using an Alternate ConfigA custom config file path can be specified by adding the --config flag to your hexo commands with a path to an alternate YAML or JSON config file, or a comma-separated list (no spaces) of multiple YAML or JSON files. 12345# use 'custom.yml' in place of '_config.yml'$ hexo server --config custom.yml# use 'custom.yml' &amp; 'custom2.json', prioritizing 'custom2.json'$ hexo server --config custom.yml,custom2.json Using multiple files combines all the config files and saves the merged settings to _multiconfig.yml. The later values take precedence. It works with any number of JSON and YAML files with arbitrarily deep objects. Note that no spaces are allowed in the list. For instance, in the above example if foo: bar is in custom.yml, but \"foo\": \"dinosaur\" is in custom2.json, _multiconfig.yml will contain foo: dinosaur. Alternate Theme ConfigHexo themes are independent projects, with separate _config.yml files. Instead of forking a theme, and maintaining a custom version with your settings, you can configure it from somewhere else: from theme_config in site’s primary configuration file Supported since Hexo 2.8.2 123456# _config.ymltheme: \"my-theme\"theme_config: bio: \"My awesome bio\" foo: bar: 'a' 12345# themes/my-theme/_config.ymlbio: \"Some generic bio\"logo: \"a-cool-image.png\" foo: baz: 'b' Resulting in theme configuration: 12345678{ bio: \"My awesome bio\", logo: \"a-cool-image.png\", foo: { bar: \"a\", baz: \"b\" }} from a dedicated _config.[theme].yml file Supported since Hexo 5.0.0 The file should be placed in your site folder, both yml and json are supported. theme inside _config.yml must be configured for Hexo to read _config.[theme].yml 12# _config.ymltheme: \"my-theme\" 1234# _config.my-theme.ymlbio: \"My awesome bio\"foo: bar: 'a' 12345# themes/my-theme/_config.ymlbio: \"Some generic bio\"logo: \"a-cool-image.png\" foo: baz: 'b' Resulting in theme configuration: 12345678{ bio: \"My awesome bio\", logo: \"a-cool-image.png\", foo: { bar: \"a\", baz: \"b\" }} We strongly recommend you to store your theme configuration in one place. But in case you have to store your theme configuration separately, you need to know the priority of those configurations: The theme_config inside site’s primary configuration file has the highest priority during merging, then the dedicated theme configuration file.The _config.yml file under the theme directory has the lowest priority.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Contributing","slug":"contributing","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/contributing/","link":"","permalink":"http://example.com/2021/10/30/contributing/","excerpt":"","text":"We welcome you to join the development of Hexo. 🤗 DevelopmentWe welcome you to join the development of Hexo. This document will help you through the process. Before You StartPlease read Contributor Covenant Code of Conduct first. Please follow the coding style: Follow Google JavaScript Style Guide. Use soft-tabs with a two space indent. Don’t put commas first. Also, Hexo has its own ESLint config, so please make sure your contribution will make ESLint happy. Workflow Fork hexojs/hexo. Clone the repository to your computer and install dependencies. 1234$ git clone https://github.com/&lt;username&gt;/hexo.git$ cd hexo$ npm install$ git submodule update --init Create a feature branch. 1$ git checkout -b new_feature Start hacking. Push the branch: 1$ git push origin new_feature Create a pull request and describe the change. Notice Please don’t modify version number in package.json. Your pull request will only get merged when tests passed. Don’t forget to run tests before submission. 1$ npm test Updating official-pluginsAlso, we welcome PR or issue to official-plugins. 🤗 Updating DocumentationThe Hexo documentation is open source and you can find the source code on hexojs/site. Workflow Fork hexojs/site Clone the repository to your computer and install dependencies. 1234$ npm install hexo-cli -g # If you don't have hexo-cli installed$ git clone https://github.com/&lt;username&gt;/site.git$ cd site$ npm install Start editing the documentation. You can start the server for live previewing. 1$ hexo server Push the branch. Create a pull request and describe the change. Translating Add a new language folder in source folder. (All lower case) Copy Markdown and template files in source folder to the new language folder. Add the new language to source/_data/language.yml. Copy en.yml in themes/navy/languages and rename to the language name (all lower case). Reporting IssuesWhen you encounter some problems when using Hexo, you can find the solutions in Troubleshooting or ask me on GitHub or Google Group. If you can’t find the answer, please report it on GitHub. Represent the problem in debug mode. Follow the steps from issue template to provide debug message and version when submitting a new issue at GitHub.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Data Files","slug":"data-files","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/data-files/","link":"","permalink":"http://example.com/2021/10/30/data-files/","excerpt":"","text":"Sometimes you may need to use some data in templates which is not directly available in your posts, or you want to reuse the data elsewhere. For such use cases, Hexo 3 introduced the new Data files. This feature loads YAML or JSON files in source/_data folder so you can use them in your site. For example, add menu.yml in source/_data folder. 123Home: /Gallery: /gallery/Archives: /archives/ And you can use them in templates: 123&lt;% for (var link in site.data.menu) { %&gt; &lt;a href=\"&lt;%= site.data.menu[link] %&gt;\"&gt; &lt;%= link %&gt; &lt;/a&gt;&lt;% } %&gt; render like this : 123&lt;a href=\"/\"&gt; Home &lt;/a&gt;&lt;a href=\"/gallery/\"&gt; Gallery &lt;/a&gt;&lt;a href=\"/archives/\"&gt; Archives &lt;/a&gt;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Front-matter","slug":"front-matter","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/front-matter/","link":"","permalink":"http://example.com/2021/10/30/front-matter/","excerpt":"","text":"Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON. YAML 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- JSON 123\"title\": \"Hello World\",\"date\": \"2013/7/13 20:46:25\";;; Settings &amp; Their Default Values Setting Description Default layout Layout config.default_layout title Title Filename (posts only) date Published date File created date updated Updated date File updated date comments Enables comment feature for the post true tags Tags (Not available for pages) categories Categories (Not available for pages) permalink Overrides the default permalink of the post excerpt Page excerpt in plain text. Use this plugin to format the text disableNunjucks Disable rendering of Nunjucks tag {{ }}/{% %} and tag plugins when enabled false lang Set the language to override auto-detection Inherited from _config.yml LayoutThe default layout is post, in accordance to the value of default_layout setting in _config.yml. When the layout is disabled (layout: false) in an article, it will not be processed with a theme. However, it will still be rendered by any available renderer: if an article is written in Markdown and a Markdown renderer (like the default hexo-renderer-marked) is installed, it will be rendered to HTML. Tag plugins are always processed regardless of layout, unless disabled by the disableNunjucks setting or renderer. Categories &amp; TagsOnly posts support the use of categories and tags. Categories apply to posts in order, resulting in a hierarchy of classifications and sub-classifications. Tags are all defined on the same hierarchical level so the order in which they appear is not important. Example 1234567categories:- Sports- Baseballtags:- Injury- Fight- Shocking If you want to apply multiple category hierarchies, use a list of names instead of a single name. If Hexo sees any categories defined this way on a post, it will treat each category for that post as its own independent hierarchy. Example 12345categories:- [Sports, Baseball]- [MLB, American League, Boston Red Sox]- [MLB, American League, New York Yankees]- Rivalries","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Generating","slug":"generating","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/generating/","link":"","permalink":"http://example.com/2021/10/30/generating/","excerpt":"","text":"Generating static files with Hexo is quite easy and fast. 1$ hexo generate Watch for File ChangesHexo can watch for file changes and regenerate files immediately. Hexo will compare the SHA1 checksum of your files and only write if file changes are detected. 1$ hexo generate --watch Deploy After GeneratingTo deploy after generating, you can run one of the following commands. There is no difference between the two. 12$ hexo generate --deploy$ hexo deploy --generate","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"GitHub Pages","slug":"github-pages","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/github-pages/","link":"","permalink":"http://example.com/2021/10/30/github-pages/","excerpt":"","text":"In this tutorial, we use GitHub Actions to deploy GitHub Pages. It works in both public and private repository. Skip to the One-command deployment section if you prefer not to upload your source folder to GitHub. Create a repo named username.github.io, where username is your username on GitHub. If you have already uploaded to other repo, rename the repo instead. Add the following highlighted lines to package.json: (skip this step if there are existing lines) 123456789101112{ \"scripts\": { \"build\": \"hexo generate\" }, \"hexo\": { \"version\": \"5.0.0\" }, \"dependencies\": { \"hexo\": \"^5.0.0\", ... }} Push the files of your Hexo folder to the source branch of your repository. The public/ folder is not (and should not be) uploaded by default, make sure the .gitignore file contains public/ line. The folder structure should be roughly similar to this repo, without the .gitmodules file. To push source to GitHub: 1$ git push origin source Add .github/workflows/pages.yml file to your repo with the following content: .github/workflows/pages.yml123456789101112131415161718192021222324252627282930313233name: Pageson: push: branches: - source # default branchjobs: pages: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js 12.x uses: actions/setup-node@v1 with: node-version: '12.x' - name: Cache NPM dependencies uses: actions/cache@v2 with: path: node_modules key: ${{ runner.OS }}-npm-cache restore-keys: | ${{ runner.OS }}-npm-cache - name: Install Dependencies run: npm install - name: Build run: npm run build - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public publish_branch: master # deploying branch Once the deployment is finished, the generated pages can be found in the master branch of your repository In your GitHub repo’s setting, navigate to “GitHub Pages” section and change Source to master branch. Check the webpage at username.github.io. Note - if you specify a custom domain name with a CNAME, you need to add the CNAME file to the source/ folder. Project pageIf you prefer to have a project page on GitHub: Navigate to your repo on GitHub. Go to the Settings tab. Change the Repository name so your blog is available at username.github.io/repository, repository can be any name, like blog or hexo. Edit your _config.yml, change the root: value to the /&lt;repository&gt;/ (must starts and ends with a slash, without the brackets). Modify the following lines in .github/workflows/pages.yml: .github/workflows/pages.yml12345678910111213141516171819name: Pageson: push: branches:- - source # default branch+ - masterjobs: pages: runs-on: ubuntu-latest steps: - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public- publish_branch: master # deploying branch+ publish_branch: gh-pages Commit and push to master branch. To push master branch to GitHub: 1$ git push origin master Once the deployment is finished, the generated pages can be found in the gh-pages branch of your repository In your GitHub repo’s setting, navigate to “GitHub Pages” section and change Source to gh-pages branch. One-command deploymentThe following instruction is adapted from one-command deployment page. Install hexo-deployer-git. Add the following configurations to _config.yml, (remove existing lines if any) 12345deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;project&gt; # example, https://github.com/hexojs/hexojs.github.io branch: gh-pages Run hexo clean &amp;&amp; hexo deploy. Check the webpage at username.github.io. Useful links GitHub Pages Travis CI Docs peaceiris/actions-gh-pages","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"GitLab Pages","slug":"gitlab-pages","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/gitlab-pages/","link":"","permalink":"http://example.com/2021/10/30/gitlab-pages/","excerpt":"","text":"Create a new repository named username.gitlab.io, where username is your username on GitLab. If you have already uploaded to other repo, rename the repo instead. Enable Shared Runners via Settings -&gt; CI / CD -&gt; Shared Runners. Push the files of your Hexo folder to the repository. The public/ folder is not (and should not be) uploaded by default, make sure the .gitignore file contains public/ line. The folder structure should be roughly similar to this repo. Add .gitlab-ci.yml file to your repo (alongside _config.yml &amp; package.json) with the following content: 1234567891011121314151617image: node:14-alpine # use nodejs v14 LTScache: paths: - node_modules/before_script: - npm install hexo-cli -g - npm installpages: script: - hexo generate artifacts: paths: - public only: - master username.gitlab.io should be up and running, once GitLab CI finishes the deployment job, (Optional) If you wish to inspect the generated site assets (html, css, js, etc), they can be found in the job artifact. Project pageIf you prefer to have a project page on GitLab: Go to Settings -&gt; General -&gt; Advanced -&gt; Change path. Change the value to a name, so the website is available at username.gitlab.io/name. It can be any name, like blog or hexo. Edit _config.yml, change the root: value from \"\" to \"name\". Commit and push. Useful links GitLab Pages GitLab CI Docs","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Helpers","slug":"helpers","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/helpers/","link":"","permalink":"http://example.com/2021/10/30/helpers/","excerpt":"","text":"Helpers are used in templates to help you insert snippets quickly. Helpers cannot be used in source files. You could easily write your own custom helper or use our ready-made helpers. URLurl_forReturns a url with the root path prefixed. Output is encoded automatically. 1&lt;%- url_for(path, [option]) %&gt; Option Description Default relative Output relative link Value of config.relative_link Examples: 12_config.ymlroot: /blog/ # example 12&lt;%- url_for('/a/path') %&gt;// /blog/a/path Relative link, follows relative_link option by defaulte.g. post/page path is ‘/foo/bar/index.html’ 12_config.ymlrelative_link: true 123456789&lt;%- url_for('/css/style.css') %&gt;// ../../css/style.css/* Override option * you could also disable it to output a non-relative link, * even when `relative_link` is enabled and vice versa. */&lt;%- url_for('/css/style.css', {relative: false}) %&gt;// /css/style.css relative_urlReturns the relative URL from from to to. 1&lt;%- relative_url(from, to) %&gt; Examples: 12&lt;%- relative_url('foo/bar/', 'css/style.css') %&gt;// ../../css/style.css full_url_forReturns a url with the config.url prefixed. Output is encoded automatically. 1&lt;%- full_url_for(path) %&gt; Examples: 12_config.ymlurl: https://example.com/blog # example 12&lt;%- full_url_for('/a/path') %&gt;// https://example.com/blog/a/path gravatarReturns the gravatar image url from an email. If you didn’t specify the [options] parameter, the default options will apply. Otherwise, you can set it to a number which will then be passed on as the size parameter to Gravatar. Finally, if you set it to an object, it will be converted into a query string of parameters for Gravatar. 1&lt;%- gravatar(email, [options]) %&gt; Option Description Default s Output image size 80 d Default image f Force default r Rating More info: Gravatar Examples: 12345678&lt;%- gravatar('a@abc.com') %&gt;// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787&lt;%- gravatar('a@abc.com', 40) %&gt;// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&lt;%- gravatar('a@abc.com' {s: 40, d: 'https://via.placeholder.com/150'}) %&gt;// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&amp;d=https%3A%2F%2Fvia.placeholder.com%2F150 HTML TagscssLoads CSS files. path can be an array or a string. path can be a string, an array, an object or an array of objects. /&lt;root&gt;/ value is prepended while .css extension is appended to the path automatically. Use object type for custom attributes. 1&lt;%- css(path, ...) %&gt; Examples: 12345678910111213&lt;%- css('style.css') %&gt;// &lt;link rel=\"stylesheet\" href=\"/style.css\"&gt;&lt;%- css(['style.css', 'screen.css']) %&gt;// &lt;link rel=\"stylesheet\" href=\"/style.css\"&gt;// &lt;link rel=\"stylesheet\" href=\"/screen.css\"&gt;&lt;%- css({ href: 'style.css', integrity: 'foo' }) %&gt;// &lt;link rel=\"stylesheet\" href=\"/style.css\" integrity=\"foo\"&gt;&lt;%- css([{ href: 'style.css', integrity: 'foo' }, { href: 'screen.css', integrity: 'bar' }]) %&gt;// &lt;link rel=\"stylesheet\" href=\"/style.css\" integrity=\"foo\"&gt;// &lt;link rel=\"stylesheet\" href=\"/screen.css\" integrity=\"bar\"&gt; jsLoads JavaScript files. path can be a string, an array, an object or an array of objects. /&lt;root&gt;/ value is prepended while .js extension is appended to the path automatically. Use object type for custom attributes. 1&lt;%- js(path, ...) %&gt; Examples: 12345678910111213&lt;%- js('script.js') %&gt;// &lt;script src=\"/script.js\"&gt;&lt;/script&gt;&lt;%- js(['script.js', 'gallery.js']) %&gt;// &lt;script src=\"/script.js\"&gt;&lt;/script&gt;// &lt;script src=\"/gallery.js\"&gt;&lt;/script&gt;&lt;%- js({ src: 'script.js', integrity: 'foo', async: true }) %&gt;// &lt;script src=\"/script.js\" integrity=\"foo\" async&gt;&lt;/script&gt;&lt;%- js([{ src: 'script.js', integrity: 'foo' }, { src: 'gallery.js', integrity: 'bar' }]) %&gt;// &lt;script src=\"/script.js\" integrity=\"foo\"&gt;&lt;/script&gt;// &lt;script src=\"/gallery.js\" integrity=\"bar\"&gt;&lt;/script&gt; link_toInserts a link. 1&lt;%- link_to(path, [text], [options]) %&gt; Option Description Default external Opens the link in a new tab false class Class name id ID Examples: 12345678&lt;%- link_to('http://www.google.com') %&gt;// &lt;a href=\"http://www.google.com\" title=\"http://www.google.com\"&gt;http://www.google.com&lt;/a&gt;&lt;%- link_to('http://www.google.com', 'Google') %&gt;// &lt;a href=\"http://www.google.com\" title=\"Google\"&gt;Google&lt;/a&gt;&lt;%- link_to('http://www.google.com', 'Google', {external: true}) %&gt;// &lt;a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"noopener\"&gt;Google&lt;/a&gt; mail_toInserts a mail link. 1&lt;%- mail_to(path, [text], [options]) %&gt; Option Description class Class name id ID subject Mail subject cc CC bcc BCC body Mail content Examples: 12345&lt;%- mail_to('a@abc.com') %&gt;// &lt;a href=\"mailto:a@abc.com\" title=\"a@abc.com\"&gt;a@abc.com&lt;/a&gt;&lt;%- mail_to('a@abc.com', 'Email') %&gt;// &lt;a href=\"mailto:a@abc.com\" title=\"Email\"&gt;Email&lt;/a&gt; image_tagInserts an image. 1&lt;%- image_tag(path, [options]) %&gt; Option Description alt Alternative text of the image class Class name id ID width Image width height Image height favicon_tagInserts a favicon. 1&lt;%- favicon_tag(path) %&gt; feed_tagInserts a feed link. 1&lt;%- feed_tag(path, [options]) %&gt; Option Description Default title Feed title config.title type Feed type atom Examples: 123456789&lt;%- feed_tag('atom.xml') %&gt;// &lt;link rel=\"alternate\" href=\"/atom.xml\" title=\"Hexo\" type=\"application/atom+xml\"&gt;&lt;%- feed_tag('rss.xml', { title: 'RSS Feed', type: 'rss' }) %&gt;// &lt;link rel=\"alternate\" href=\"/atom.xml\" title=\"RSS Feed\" type=\"application/atom+xml\"&gt;/* Defaults to hexo-generator-feed's config if no argument */&lt;%- feed_tag() %&gt;// &lt;link rel=\"alternate\" href=\"/atom.xml\" title=\"Hexo\" type=\"application/atom+xml\"&gt; Conditional Tagsis_currentCheck whether path matches the URL of the current page. Use strict options to enable strict matching. 1&lt;%- is_current(path, [strict]) %&gt; is_homeCheck whether the current page is home page. 1&lt;%- is_home() %&gt; is_postCheck whether the current page is a post. 1&lt;%- is_post() %&gt; is_pageCheck whether the current page is a page. 1&lt;%- is_page() %&gt; is_archiveCheck whether the current page is an archive page. 1&lt;%- is_archive() %&gt; is_yearCheck whether the current page is a yearly archive page. 1&lt;%- is_year() %&gt; is_monthCheck whether the current page is a monthly archive page. 1&lt;%- is_month() %&gt; is_categoryCheck whether the current page is a category page.If a string is given as parameter, check whether the current page match the given category. 12&lt;%- is_category() %&gt;&lt;%- is_category('hobby') %&gt; is_tagCheck whether the current page is a tag page.If a string is given as parameter, check whether the current page match the given tag. 12&lt;%- is_tag() %&gt;&lt;%- is_tag('hobby') %&gt; String ManipulationtrimRemoves prefixing and trailing spaces of a string. 1&lt;%- trim(string) %&gt; strip_htmlSanitizes all HTML tags in a string. 1&lt;%- strip_html(string) %&gt; Examples: 12&lt;%- strip_html('It\\'s not &lt;b&gt;important&lt;/b&gt; anymore!') %&gt;// It's not important anymore! titlecaseTransforms a string into proper title caps. 1&lt;%- titlecase(string) %&gt; Examples: 12&lt;%- titlecase('this is an apple') %&gt;# This is an Apple markdownRenders a string with Markdown. 1&lt;%- markdown(str) %&gt; Examples: 12&lt;%- markdown('make me **strong**') %&gt;// make me &lt;strong&gt;strong&lt;/strong&gt; renderRenders a string. 1&lt;%- render(str, engine, [options]) %&gt; Examples: 12&lt;%- render('p(class=\"example\") Test', 'pug'); %&gt;// &lt;p class=\"example\"&gt;Test&lt;/p&gt; See Rendering for more details. word_wrapWraps text into lines no longer than length. length is 80 by default. 1&lt;%- word_wrap(str, [length]) %&gt; Examples: 12&lt;%- word_wrap('Once upon a time', 8) %&gt;// Once upon\\n a time truncateTruncates text after certain length. Default is 30 characters. 1&lt;%- truncate(text, [options]) %&gt; Examples: 12345678&lt;%- truncate('Once upon a time in a world far far away', {length: 17}) %&gt;// Once upon a ti...&lt;%- truncate('Once upon a time in a world far far away', {length: 17, separator: ' '}) %&gt;// Once upon a...&lt;%- truncate('And they found that many people were sleeping better.', {length: 25, omission: '... (continued)'}) %&gt;// And they f... (continued) escape_htmlEscapes HTML entities in a string. 1&lt;%- escape_html(str) %&gt; Examples: 12&lt;%- escape_html('&lt;p&gt;Hello \"world\".&lt;/p&gt;') %&gt;// &amp;lt;p&amp;gt;Hello &amp;quot;world&amp;quot;.&amp;lt;&amp;#x2F;p&amp;gt; TemplatespartialLoads other template files. You can define local variables in locals. 1&lt;%- partial(layout, [locals], [options]) %&gt; Option Description Default cache Cache contents (Use fragment cache) false only Strict local variables. Only use variables set in locals in templates. false fragment_cacheCaches the contents in a fragment. It saves the contents within a fragment and serves the cache when the next request comes in. 1&lt;%- fragment_cache(id, fn); Examples: 123&lt;%- fragment_cache('header', function(){ return '&lt;header&gt;&lt;/header&gt;';}) %&gt; Date &amp; TimedateInserts formatted date. date can be unix time, ISO string, date object, or Moment.js object. format is date_format setting by default. 1&lt;%- date(date, [format]) %&gt; Examples: 12345&lt;%- date(Date.now()) %&gt;// 2013-01-01&lt;%- date(Date.now(), 'YYYY/M/D') %&gt;// Jan 1 2013 date_xmlInserts date in XML format. date can be unix time, ISO string, date object, or Moment.js object. 1&lt;%- date_xml(date) %&gt; Examples: 12&lt;%- date_xml(Date.now()) %&gt;// 2013-01-01T00:00:00.000Z timeInserts formatted time. date can be unix time, ISO string, date object, or Moment.js object. format is time_format setting by default. 1&lt;%- time(date, [format]) %&gt; Examples: 12345&lt;%- time(Date.now()) %&gt;// 13:05:12&lt;%- time(Date.now(), 'h:mm:ss a') %&gt;// 1:05:12 pm full_dateInserts formatted date and time. date can be unix time, ISO string, date object, or Moment.js object. format is date_format + time_format setting by default. 1&lt;%- full_date(date, [format]) %&gt; Examples: 12345&lt;%- full_date(new Date()) %&gt;// Jan 1, 2013 0:00:00&lt;%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %&gt;// Tuesday, January 1st 2013, 12:00:00 am momentMoment.js library. Listlist_categoriesInserts a list of all categories. 1&lt;%- list_categories([options]) %&gt; Option Description Default orderby Order of categories name order Sort of order. 1, asc for ascending; -1, desc for descending 1 show_count Display the number of posts for each category true style Style to display the category list. list displays categories in an unordered list. list separator Separator between categories. (Only works if style is not list) , depth Levels of categories to be displayed. 0 displays all categories and child categories; -1 is similar to 0 but displayed in flat; 1 displays only top level categories. 0 class Class name of category list. category transform The function that changes the display of category name. suffix Add a suffix to link. None Examples: 12345678910111213&lt;%- list_categories(post.categories, { class: 'post-category', transform(str) { return titlecase(str); }}) %&gt;&lt;%- list_categories(post.categories, { class: 'post-category', transform(str) { return str.toUpperCase(); }}) %&gt; list_tagsInserts a list of all tags. 1&lt;%- list_tags([options]) %&gt; Option Description Default orderby Order of categories name order Sort of order. 1, asc for ascending; -1, desc for descending 1 show_count Display the number of posts for each tag true style Style to display the tag list. list displays tags in an unordered list. list separator Separator between categories. (Only works if style is not list) , class Class name of tag list (string) or customize each tag’s class (object, see below). tag transform The function that changes the display of tag name. See examples in list_categories. amount The number of tags to display (0 = unlimited) 0 suffix Add a suffix to link. None Class advanced customization: Option Description Default class.ul &lt;ul&gt; class name (only for style list) tag-list (list style) class.li &lt;li&gt; class name (only for style list) tag-list-item (list style) class.a &lt;a&gt; class name tag-list-link (list style) tag-link (normal style) class.label &lt;span&gt; class name where the tag label is stored (only for normal style, when class.label is set the label is put in a &lt;span&gt;) tag-label (normal style) class.count &lt;span&gt; class name where the tag counter is stored (only when show_count is true) tag-list-count (list style) tag-count (normal style) Examples: 1234&lt;%- list_tags(site.tags, {class: 'classtest', style: false, separator: ' | '}) %&gt;&lt;%- list_tags(site.tags, {class: 'classtest', style: 'list'}) %&gt;&lt;%- list_tags(site.tags, {class: {ul: 'ululul', li: 'lilili', a: 'aaa', count: 'ccc'}, style: false, separator: ' | '}) %&gt;&lt;%- list_tags(site.tags, {class: {ul: 'ululul', li: 'lilili', a: 'aaa', count: 'ccc'}, style: 'list'}) %&gt; list_archivesInserts a list of archives. 1&lt;%- list_archives([options]) %&gt; Option Description Default type Type. This value can be yearly or monthly. monthly order Sort of order. 1, asc for ascending; -1, desc for descending 1 show_count Display the number of posts for each archive true format Date format MMMM YYYY style Style to display the archive list. list displays archives in an unordered list. list separator Separator between archives. (Only works if style is not list) , class Class name of archive list. archive transform The function that changes the display of archive name. See examples in list_categories. list_postsInserts a list of posts. 1&lt;%- list_posts([options]) %&gt; Option Description Default orderby Order of posts date order Sort of order. 1, asc for ascending; -1, desc for descending 1 style Style to display the post list. list displays posts in an unordered list. list separator Separator between posts. (Only works if style is not list) , class Class name of post list. post amount The number of posts to display (0 = unlimited) 6 transform The function that changes the display of post name. See examples in list_categories. tagcloudInserts a tag cloud. 1&lt;%- tagcloud([tags], [options]) %&gt; Option Description Default min_font Minimum font size 10 max_font Maximum font size 20 unit Unit of font size px amount Total amount of tags unlimited orderby Order of tags name order Sort order. 1, asc as ascending; -1, desc as descending 1 color Colorizes the tag cloud false start_color Start color. You can use hex (#b700ff), rgba (rgba(183, 0, 255, 1)), hsla (hsla(283, 100%, 50%, 1)) or color keywords. This option only works when color is true. end_color End color. You can use hex (#b700ff), rgba (rgba(183, 0, 255, 1)), hsla (hsla(283, 100%, 50%, 1)) or color keywords. This option only works when color is true. class Class name prefix of tags level The number of different class names. This option only works when class is set. 10 Examples: 12345// Default options&lt;%- tagcloud() %&gt;// Limit number of tags to 30&lt;%- tagcloud({amount: 30}) %&gt; MiscellaneouspaginatorInserts a paginator. 1&lt;%- paginator(options) %&gt; Option Description Default base Base URL / format URL format page/%d/ total The number of pages 1 current Current page number 0 prev_text The link text of previous page. Works only if prev_next is set to true. Prev next_text The link text of next page. Works only if prev_next is set to true. Next space The space text &amp;hellp; prev_next Display previous and next links true end_size The number of pages displayed on the start and the end side 1 mid_size The number of pages displayed between current page, but not including current page 2 show_all Display all pages. If this is set to true, end_size and mid_size will not work false escape Escape HTML tags true Examples: 1234&lt;%- paginator({ prev_text: '&lt;', next_text: '&gt;'}) %&gt; 123456&lt;!-- Rendered as --&gt;&lt;a href=\"/1/\"&gt;&amp;lt;&lt;/a&gt;&lt;a href=\"/1/\"&gt;1&lt;/a&gt;2&lt;a href=\"/3/\"&gt;3&lt;/a&gt;&lt;a href=\"/3/\"&gt;&amp;gt;&lt;/a&gt; 12345&lt;%- paginator({ prev_text: '&lt;i class=\"fa fa-angle-left\"&gt;&lt;/i&gt;', next_text: '&lt;i class=\"fa fa-angle-right\"&gt;&lt;/i&gt;', escape: false}) %&gt; 123456&lt;!-- Rendered as --&gt;&lt;a href=\"/1/\"&gt;&lt;i class=\"fa fa-angle-left\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=\"/1/\"&gt;1&lt;/a&gt;2&lt;a href=\"/3/\"&gt;3&lt;/a&gt;&lt;a href=\"/3/\"&gt;&lt;i class=\"fa fa-angle-right\"&gt;&lt;/i&gt;&lt;/a&gt; search_formInserts a Google search form. 1&lt;%- search_form(options) %&gt; Option Description Default class The class name of form search-form text Search hint word Search button Display search button. The value can be a boolean or a string. If the value is a string, it’ll be the text of the button. false number_formatFormats a number. 1&lt;%- number_format(number, [options]) %&gt; Option Description Default precision The precision of number. The value can be false or a nonnegative integer. false delimiter The thousands delimiter , separator The separator between the fractional and integer digits. . Examples: 1234567891011121314&lt;%- number_format(12345.67, {precision: 1}) %&gt;// 12,345.68&lt;%- number_format(12345.67, {precision: 4}) %&gt;// 12,345.6700&lt;%- number_format(12345.67, {precision: 0}) %&gt;// 12,345&lt;%- number_format(12345.67, {delimiter: ''}) %&gt;// 12345.67&lt;%- number_format(12345.67, {separator: '/'}) %&gt;// 12,345/67 meta_generatorInserts generator tag. 1&lt;%- meta_generator() %&gt; Examples: 12&lt;%- meta_generator() %&gt;// &lt;meta name=\"generator\" content=\"Hexo 4.0.0\"&gt; open_graphInserts Open Graph data. 1&lt;%- open_graph([options]) %&gt; Option Description Default title Page title (og:title) page.title type Page type (og:type) blog url Page URL (og:url) url image Page images (og:image) All images in the content site_name Site name (og:site_name) config.title description Page description (og:description) Page excerpt or first 200 characters of the content twitter_card Twitter card type (twitter:card) summary twitter_id Twitter ID (twitter:creator) twitter_site Twitter Site (twitter:site) google_plus Google+ profile link fb_admins Facebook admin ID fb_app_id Facebook App ID tocParses all heading tags (h1~h6) in the content and inserts a table of contents. 1&lt;%- toc(str, [options]) %&gt; Option Description Default class Class name toc list_number Displays list number true max_depth Maximum heading depth of generated toc 6 min_depth Minimum heading depth of generated toc 1 Examples: 1&lt;%- toc(page.content) %&gt;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Documentation","slug":"index","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/index/","link":"","permalink":"http://example.com/2021/10/30/index/","excerpt":"","text":"Welcome to the Hexo documentation. If you encounter any problems when using Hexo, have a look at the troubleshooting guide, raise an issue on GitHub or start a topic on the Google Group. What is Hexo?Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds. InstallationIt only takes a few minutes to set up Hexo. If you encounter a problem and can’t find the solution here, please submit a GitHub issue and we’ll help. RequirementsInstalling Hexo is quite easy and only requires the following beforehand: Node.js (Should be at least Node.js 10.13, recommends 12.0 or higher) Git If your computer already has these, congratulations! You can skip to the Hexo installation step. If not, please follow the following instructions to install all the requirements. Install Git Windows: Download &amp; install git. Mac: Install it with Homebrew, MacPorts or installer. Linux (Ubuntu, Debian): sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS): sudo yum install git-core You may encounter some problems when compiling. Please install Xcode from App Store first. After Xcode is installed, open Xcode and go to Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install to install command line tools. Install Node.jsNode.js provides official installer for most platforms. Alternative installation methods: Windows: Install it with nvs (recommended) or nvm. Mac: Install it with Homebrew or MacPorts. Linux (DEB/RPM-based): Install it with NodeSource. Others: Install it through respective package manager. Refer to the guide provided by Node.js. nvs is also recommended for Mac and Linux to avoid possible permission issue. If you use the official installer, make sure Add to PATH is checked (it’s checked by default). If you encounter EACCES permission error when trying to install Hexo, please follow the workaround provided by npmjs; overriding with root/sudo is highly discouraged. If you installed Node.js using Snap, you may need to manually run npm install in the target folder when initializing a blog. Install HexoOnce all the requirements are installed, you can install Hexo with npm: 1$ npm install -g hexo-cli Advanced installation and usageAdvanced users may prefer to install and use hexo package instead. 1$ npm install hexo Once installed, you can run Hexo in two ways: npx hexo &lt;command&gt; Linux users can set relative path of node_modules/ folder: 1echo 'PATH=\"$PATH:./node_modules/.bin\"' &gt;&gt; ~/.profile then run Hexo using hexo &lt;command&gt; Minimum required Node.js versionIf you are stuck with older Node.js, you can consider installing a past version of Hexo. Please note we do not provide bugfixes to past versions of Hexo. We highly recommend to always install the latest version of Hexo and the recommended version of Node.js, whenever possible. Hexo version Minimum Node.js version 5.0+ 10.13.0 4.1 - 4.2 8.10 4.0 8.6 3.3 - 3.9 6.9 3.2 - 3.3 0.12 3.0 - 3.1 0.10 or iojs 0.0.1 - 2.8 0.10","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Internationalization (i18n)","slug":"internationalization","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/internationalization/","link":"","permalink":"http://example.com/2021/10/30/internationalization/","excerpt":"","text":"You can use internationalization to present your site in different languages. The default language is set by modifying the language setting in _config.yml. You can also set multiple languages and modify the order of default languages. 12345language: zh-twlanguage:- zh-tw- en Language FilesLanguage files can be YAML or JSON files. You should put them into the languages folder in the theme. There is support for the printf format in language files. TemplatesUse __ or _p helpers in templates to get the translated strings. The former is for normal usage and the latter is for plural strings. For example: en.yml1234567index: title: Home add: Add video: zero: No videos one: One video other: %d videos 12345&lt;%= __('index.title') %&gt;// Home&lt;%= _p('index.video', 3) %&gt;// 3 videos PathYou can set the language of pages in front-matter, or modify the i18n_dir setting in _config.yml to enable automatic detection by Hexo. 1i18n_dir: :lang The default value of i18n_dir setting is :lang, which means that Hexo will detect the language within the first segment of URL. For example: 123/index.html =&gt; en/archives/index.html =&gt; en/zh-tw/index.html =&gt; zh-tw The string will only be served as a language when the language file exists. So archives in /archives/index.html (example 2) will not get served as a language.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Migration","slug":"migration","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/migration/","link":"","permalink":"http://example.com/2021/10/30/migration/","excerpt":"","text":"RSSFirst, install the hexo-migrator-rss plugin. 1$ npm install hexo-migrator-rss --save Once the plugin is installed, run the following command to migrate all posts from RSS. source can be a file path or URL. 1$ hexo migrate rss &lt;source&gt; JekyllMove all files in the Jekyll _posts folder to the source/_posts folder. Modify the new_post_name setting in _config.yml: 1new_post_name: :year-:month-:day-:title.md OctopressMove all files in the Octopress source/_posts folder to source/_posts Modify the new_post_name setting in _config.yml: 1new_post_name: :year-:month-:day-:title.md WordPressFirst, install the hexo-migrator-wordpress plugin. 1$ npm install hexo-migrator-wordpress --save Export your WordPress site by going to “Tools” → “Export” → “WordPress” in the WordPress dashboard (see the WordPress support page for more details). Now run: 1$ hexo migrate wordpress &lt;source&gt; Where source is the file path or URL to the WordPress export file. JoomlaFirst, install the hexo-migrator-joomla plugin. 1$ npm install hexo-migrator-joomla --save Export your Joomla articles using the J2XML component. Now run: 1$ hexo migrate joomla &lt;source&gt; Where source is the file path or URL to the Joomla export file.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"One-Command Deployment","slug":"one-command-deployment","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/one-command-deployment/","link":"","permalink":"http://example.com/2021/10/30/one-command-deployment/","excerpt":"","text":"Hexo provides a fast and easy deployment strategy. You only need one single command to deploy your site to your server. 1$ hexo deploy Install the necessary plugin(s) that is compatible with the deployment method provided by your server/repository. Deployment is usually configured through _config.yml. A valid configuration must have the type field. For example: 12deploy: type: git You can use multiple deployers. Hexo will execute each deployer in order. 12345deploy:- type: git repo:- type: heroku repo: Refer to the Plugins list for more deployment plugins. Git Install hexo-deployer-git. 1$ npm install hexo-deployer-git --save Edit _config.yml (with example values shown below as comments): 12345deploy: type: git repo: &lt;repository url&gt; # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io branch: [branch] message: [message] Option Description Default repo URL of the target repository branch Branch name. gh-pages (GitHub)coding-pages (Coding.net)master (others) message Customize commit message. Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }} token Optional token value to authenticate with the repo. Prefix with $ to read token from environment variable Deploy your site hexo clean &amp;&amp; hexo deploy. You will be prompted with username and password of the target repository, unless you authenticate with a token or ssh key. hexo-deployer-git does not store your username and password. Use git-credential-cache to store them temporarily. Navigate to your repository settings and change the “Pages” branch to gh-pages (or the branch specified in your config). The deployed site should be live on the link shown on the “Pages” setting. HerokuInstall hexo-deployer-heroku. 1$ npm install hexo-deployer-heroku --save Edit settings. 1234deploy: type: heroku repo: &lt;repository url&gt; message: [message] Option Description repo, repository Heroku repository URL message Customize commit message (Default to Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}) NetlifyNetlify provides continuous deployment (Git-triggered builds), an intelligent global CDN, full DNS (including custom domains), automated HTTPS, asset acceleration, and a lot more. It is a unified platform that automates your code to create high-performance, easily maintainable sites and web apps. There are two different ways to deploy your sites on Netlify. The most common way is to use the web UI. Go to the create a new site page, select your project repo from GitHub, GitLab, or Bitbucket, and follow the prompts. Alternatively, you can use Netlify’s Node based CLI tool to manage and deploy sites on Netlify without leaving your terminal. You can also add a Deploy to Netlify Button in your README.file to allow others to create a copy of your repository and be deployed to Netlify via one click. RsyncInstall hexo-deployer-rsync. 1$ npm install hexo-deployer-rsync --save Edit settings. 123456789deploy: type: rsync host: &lt;host&gt; user: &lt;user&gt; root: &lt;root&gt; port: [port] delete: [true|false] verbose: [true|false] ignore_errors: [true|false] Option Description Default host Address of remote host user Username root Root directory of remote host port Port 22 delete Delete old files on remote host true verbose Display verbose messages true ignore_errors Ignore errors false OpenShiftInstall hexo-deployer-openshift. 1$ npm install hexo-deployer-openshift --save Edit settings. 1234deploy: type: openshift repo: &lt;repository url&gt; message: [message] Option Description repo OpenShift repository URL message Customize commit message (Default to Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}) FTPSyncInstall hexo-deployer-ftpsync. 1$ npm install hexo-deployer-ftpsync --save Edit settings. 12345678910deploy: type: ftpsync host: &lt;host&gt; user: &lt;user&gt; pass: &lt;password&gt; remote: [remote] port: [port] ignore: [ignore] connections: [connections] verbose: [true|false] Option Description Default host Address of remote host user Username pass Password remote Root directory of remote host / port Port 21 ignore Ignore the files on either host or remote connections Connections number 1 verbose Display verbose messages false SFTPInstall hexo-deployer-sftp. Deploys the site via SFTP, allowing for passwordless connections using ssh-agent. 1$ npm install hexo-deployer-sftp --save Edit settings. 12345678910deploy: type: sftp host: &lt;host&gt; user: &lt;user&gt; pass: &lt;password&gt; remotePath: [remote path] port: [port] privateKey: [path/to/privateKey] passphrase: [passphrase] agent: [path/to/agent/socket] Option Description Default host Address of remote host user Username pass Password remotePath Root directory of remote host / port Port 22 privateKey Path to a ssh private key passphrase Optional passphrase for the private key agent Path to the ssh-agent socket $SSH_AUTH_SOCK VercelVercel is a cloud platform that enables developers to host Jamstack websites and web services that deploy instantly, scale automatically, and requires no supervision, all with zero configuration. They provide a global edge network, SSL encryption, asset compression, cache invalidation, and more. Step 1: Add a build script to your package.json file: 12345{ \"scripts\": { \"build\": \"hexo generate\" }} Step 2: Deploy your Hexo Website to Vercel To deploy your Hexo app with a Vercel for Git Integration, make sure it has been pushed to a Git repository. Import the project into Vercel using the Import Flow. During the import, you will find all relevant options preconfigured for you; however, you can choose to change any of these options, a list of which can be found here. After your project has been imported, all subsequent pushes to branches will generate Preview Deployments, and all changes made to the Production Branch (commonly “main”) will result in a Production Deployment. Alternatively, you can click the deploy button below to create a new project: 21YunBox On 21YunBox, setup up a new Static Site project from GitHub with the following settings: Build command: yarn &amp;&amp; hexo deploy Publish directory: public Press Deploy Buton！ That’s it! Your app will be live on your 21YunBox URL as soon as the build finishes. The sample app for hexo is deployed at https://hexo.21yunbox.com/. For more detail, follow this guide at https://www.21yunbox.com/docs/#/deploy-hexo. BipBip is a commercial hosting service which provides zero downtime deployment, a global CDN, SSL, unlimited bandwidth and more for static websites. Plans are available on a pay as you go, per domain basis. Getting started is quick and easy, as Bip provides out the box support for Hexo. This guide assumes you already have a Bip domain and Bip CLI installed. 1: Initialise your project directory 1$ bip init Follow the prompts, where you’ll be asked which domain you’d like to deploy to. Bip will detect that you’re using Hexo, and set project settings like the source file directory automatically. 2: Deploy your website 1$ hexo generate —deploy &amp;&amp; bip deploy After a few moments, your website will be deployed. RSS3RSS3 is an open protocol designed for content and social networks in the Web 3.0 era. Install hexo-deployer-rss3. Modify the configuration. 12345678910deploy: # The root configuration block for all deployers- type: rss3 endpoint: https://hub.rss3.io privateKey: 47e18d6c386898b424025cd9db446f779ef24ad33a26c499c87bb3d9372540ba ipfs: deploy: true gateway: pinata api: key: d693df715d3631e489d6 secret: ee8b74626f12b61c1a4bde3b8c331ad390567c86ba779c9b18561ee92c1cbff0 Parameters Description endpoint a link to the RSS3 Hub privateKey your private key, 64 bytes ipfs/deploy whether to deploy to IPFS ipfs/gateway IPFS API gateway ipfs/api/key IPFS gateway-related authentication content ipfs/api/secret IPFS gateway-related authentication content generate static files deploy For deployment-related considerations, you can refer to Our documentation. Other MethodsAll generated files are saved in the public folder. You can copy them to wherever you like.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Permalinks","slug":"permalinks","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/permalinks/","link":"","permalink":"http://example.com/2021/10/30/permalinks/","excerpt":"","text":"You can specify the permalinks for your site in _config.yml or in the front-matter for each post. VariablesBesides the following variables, you can use any attributes in the permalink. Variable Description :year Published year of posts (4-digit) :month Published month of posts (2-digit) :i_month Published month of posts (Without leading zeros) :day Published day of posts (2-digit) :i_day Published day of posts (Without leading zeros) :hour Published hour of posts (2-digit) :minute Published minute of posts (2-digit) :second Published second of posts (2-digit) :title Filename (relative to “source/_posts/“ folder) :name Filename :post_title Post title :id Post ID (not persistent across cache reset) :category Categories. If the post is uncategorized, it will use the default_category value. :hash SHA1 hash of filename (same as :title) and date (12-hexadecimal) You can define the default value of each variable in the permalink through the permalink_defaults setting: 12permalink_defaults: lang: en Examplessource/_posts/hello-world.md12345title: Hello Worlddate: 2013-07-14 17:01:34categories:- foo- bar Setting Result :year/:month/:day/:title/ 2013/07/14/hello-world/ :year-:month-:day-:title.html 2013-07-14-hello-world.html :category/:title/ foo/bar/hello-world/ :title-:hash/ hello-world-a2c8ac003b43/ source/_posts/lorem/hello-world.md12345title: Hello Worlddate: 2013-07-14 17:01:34categories:- foo- bar Setting Result :year/:month/:day/:title/ 2013/07/14/lorem/hello-world/ :year/:month/:day/:name/ 2013/07/14/hello-world/ Multi-language SupportTo create a multi-language site, you can modify the new_post_name and permalink settings like this: 12new_post_name: :lang/:title.mdpermalink: :lang/:title/ When you create a new post, the post will be saved to: 12$ hexo new \"Hello World\" --lang tw# =&gt; source/_posts/tw/Hello-World.md and the URL will be: 1http://localhost:4000/tw/hello-world/","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Plugins","slug":"plugins","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/plugins/","link":"","permalink":"http://example.com/2021/10/30/plugins/","excerpt":"","text":"Hexo has a powerful plugin system, which makes it easy to extend functions without modifying the source code of the core module. There are two kinds of plugins in Hexo: ScriptIf your plugin is relatively simple, it’s recommended to use a script. All you need to do is put your JavaScript files in the scripts folder and Hexo will load them during initialization. PluginIf your code is complicated or if you want to publish it to the NPM registry, we recommend using a plugin. First, create a folder in the node_modules folder. The name of this folder must begin with hexo- or Hexo will ignore it. Your new folder must contain at least two files: one containing the actual JavaScript code and one package.json file that describes the purpose of the plugin and sets its dependencies. 123.├── index.js└── package.json At the very least, you should set the name, version and main entries in package.json. For example: package.json12345{ \"name\": \"hexo-my-plugin\", \"version\": \"0.0.1\", \"main\": \"index\"} You’ll also need to list your plugin as a dependency in the root package.json of your hexo instance in order for Hexo to detect and load it. ToolsYou can make use of the official tools provided by Hexo to accelerate development: hexo-fs：File IO hexo-util：Utilities hexo-i18n：Localization (i18n) hexo-pagination：Generate pagination data PublishingWhen your plugin is ready, you may consider publishing it to the plugin list to invite other people to start using it. Publishing your own plugins is very similar to updating documentation. Fork hexojs/site Clone the repository to your computer and install dependencies. 123$ git clone https://github.com/&lt;username&gt;/site.git$ cd site$ npm install Edit source/_data/plugins.yml and add your plugin. For example: 1234567- name: hexo-server description: Server module for Hexo. link: https://github.com/hexojs/hexo-server tags: - official - server - console Push the branch. Create a pull request and describe the change.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Quick hexo startup","slug":"quick-startup","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/quick-startup/","link":"","permalink":"http://example.com/2021/10/30/quick-startup/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Server","slug":"server","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/server/","link":"","permalink":"http://example.com/2021/10/30/server/","excerpt":"","text":"hexo-serverWith the release of Hexo 3, the server has been separated from the main module. To start using the server, you will first have to install hexo-server. 1$ npm install hexo-server --save Once the server has been installed, run the following command to start the server. Your website will run at http://localhost:4000 by default. When the server is running, Hexo will watch for file changes and update automatically so it’s not necessary to manually restart the server. 1$ hexo server If you want to change the port or if you’re encountering EADDRINUSE errors, use the -p option to set a different port. 1$ hexo server -p 5000 Static ModeIn static mode, only files in the public folder will be served and file watching is disabled. You have to run hexo generate before starting the server. Usually used in production. 1$ hexo server -s Custom IPHexo runs the server at 0.0.0.0 by default. You can override the default IP setting. 1$ hexo server -i 192.168.1.1 PowPow is a zero-config Rack server for Mac. Install1$ curl get.pow.cx | sh SetupSymlink the folder into ~/.pow 12$ cd ~/.pow$ ln -s /path/to/myapp Your website will be up and running at http://myapp.test. The URL is based on the name of the symlink.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Setup","slug":"setup","date":"2021-10-30T18:26:24.492Z","updated":"2021-10-30T18:26:24.496Z","comments":true,"path":"2021/10/30/setup/","link":"","permalink":"http://example.com/2021/10/30/setup/","excerpt":"","text":"Once Hexo is installed, run the following commands to initialize Hexo in the target &lt;folder&gt;. 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install Once initialized, here’s what your project folder will look like: 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.ymlSite configuration file. You can configure most settings here. package.jsonApplication data. The EJS, Stylus and Markdown renderers are installed by default. If you want, you can uninstall them later. package.json12345678910111213141516171819{ \"name\": \"hexo-site\", \"version\": \"0.0.0\", \"private\": true, \"hexo\": { \"version\": \"\" }, \"dependencies\": { \"hexo\": \"^3.8.0\", \"hexo-generator-archive\": \"^0.1.5\", \"hexo-generator-category\": \"^0.1.3\", \"hexo-generator-index\": \"^0.2.1\", \"hexo-generator-tag\": \"^0.2.0\", \"hexo-renderer-ejs\": \"^0.3.1\", \"hexo-renderer-stylus\": \"^0.3.3\", \"hexo-renderer-marked\": \"^0.3.2\", \"hexo-server\": \"^0.3.3\" }} scaffoldsScaffold folder. When you create a new post, Hexo bases the new file on the scaffold. sourceSource folder. This is where you put your site’s content. Hexo ignores hidden files and files or folders whose names are prefixed with _ (underscore) - except the _posts folder. Renderable files (e.g. Markdown, HTML) will be processed and put into the public folder, while other files will simply be copied. themesTheme folder. Hexo generates a static website by combining the site contents with the theme.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}]},{"title":"Deploying static websites with S3 and Github actions","slug":"deploying-with-github-actions","date":"2021-10-30T08:55:39.000Z","updated":"2021-10-30T18:26:24.492Z","comments":true,"path":"2021/10/30/deploying-with-github-actions/","link":"","permalink":"http://example.com/2021/10/30/deploying-with-github-actions/","excerpt":"","text":"IntroOnce your awesome Hexo static website is up and running, you may want to deploy somewhere (unless is something you really don’t want to share, such as the last letter you wrote for your ex just before she dumped you for a way more qualified cloud engineer, amerite?). so there are multiple choices, but as yet another AWS enthusiast, obiously I’m going to introduce you to the github + github actions + route53 + s3 + CloudFront; Ignore the fact that github is now yet another service property of Microsoft (😡) and just follow me on this one, because publishing your website using github will bring you up some useful features. AWS setupFor starter, you have to go to AWS console webapp","categories":[{"name":"CI/CD","slug":"CI-CD","permalink":"http://example.com/categories/CI-CD/"},{"name":"AWS","slug":"CI-CD/AWS","permalink":"http://example.com/categories/CI-CD/AWS/"},{"name":"hexo","slug":"CI-CD/AWS/hexo","permalink":"http://example.com/categories/CI-CD/AWS/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"AWS","slug":"AWS","permalink":"http://example.com/tags/AWS/"},{"name":"S3","slug":"S3","permalink":"http://example.com/tags/S3/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"CI/CD","slug":"CI-CD","permalink":"http://example.com/tags/CI-CD/"}]}],"categories":[{"name":"frontend","slug":"frontend","permalink":"http://example.com/categories/frontend/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"cheatsheets","slug":"cheatsheets","permalink":"http://example.com/categories/cheatsheets/"},{"name":"CI/CD","slug":"CI-CD","permalink":"http://example.com/categories/CI-CD/"},{"name":"AWS","slug":"CI-CD/AWS","permalink":"http://example.com/categories/CI-CD/AWS/"},{"name":"hexo","slug":"CI-CD/AWS/hexo","permalink":"http://example.com/categories/CI-CD/AWS/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"website","slug":"website","permalink":"http://example.com/tags/website/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"},{"name":"AWS","slug":"AWS","permalink":"http://example.com/tags/AWS/"},{"name":"S3","slug":"S3","permalink":"http://example.com/tags/S3/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"CI/CD","slug":"CI-CD","permalink":"http://example.com/tags/CI-CD/"}]}